{"ast":null,"code":"var _class;\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nexport class SignupComponent {\n  constructor(_authService, route, toastr) {\n    this._authService = _authService;\n    this.route = route;\n    this.toastr = toastr;\n    this.errors = [];\n    this.signupForm = new FormGroup({\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      password: new FormControl(\"\", Validators.required)\n    });\n  }\n  onSubmit() {\n    const user = {\n      email: this.signupForm.value.email,\n      password: this.signupForm.value.password\n    };\n    //call the service method\n    this._authService.signup(user).subscribe(res => {\n      console.log(res);\n      this.toastr.success(\"Successfully signup\", \"Car Rental App\");\n      this.route.navigate(['/login']);\n    }, err => {\n      if (err.error instanceof Array) {\n        err.error.forEach(err => {\n          this.errors.push(err.description);\n        });\n      } else {\n        console.log(err.message); // Display the general error message\n      }\n    });\n  }\n\n  get email() {\n    return this.signupForm.value.email;\n  }\n  get password() {\n    return this.signupForm.value.password;\n  }\n}\n_class = SignupComponent;\n_class.ɵfac = function SignupComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ToastrService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-signup\"]],\n  decls: 2,\n  vars: 0,\n  template: function SignupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"signup works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;AAUnE,OAAM,MAAOC,eAAe;EAQ1BC,YAAoBC,YAAwB,EAASC,KAAY,EAASC,MAAoB;IAA1E,iBAAY,GAAZF,YAAY;IAAqB,UAAK,GAALC,KAAK;IAAgB,WAAM,GAANC,MAAM;IAPhF,WAAM,GAAK,EAAE;IAEb,eAAU,GAAC,IAAIN,SAAS,CAAC;MACvBO,KAAK,EAAC,IAAIR,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACO,QAAQ,EAACP,UAAU,CAACM,KAAK,CAAC,CAAC;MAChEE,QAAQ,EAAC,IAAIV,WAAW,CAAC,EAAE,EAACE,UAAU,CAACO,QAAQ;KAChD,CAAC;EAE+F;EAEjGE,QAAQ;IACN,MAAMC,IAAI,GAAC;MACTJ,KAAK,EAAC,IAAI,CAACK,UAAU,CAACC,KAAK,CAACN,KAAK;MACjCE,QAAQ,EAAC,IAAI,CAACG,UAAU,CAACC,KAAK,CAACJ;KAChC;IACD;IACA,IAAI,CAACL,YAAY,CAACU,MAAM,CAACH,IAAI,CAAC,CAACI,SAAS,CAAEC,GAAO,IAAG;MAClDC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,IAAI,CAACV,MAAM,CAACa,OAAO,CAAC,qBAAqB,EAAC,gBAAgB,CAAC;MAC3D,IAAI,CAACd,KAAK,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC,EAAEC,GAAG,IAAG;MACP,IAAIA,GAAG,CAACC,KAAK,YAAYC,KAAK,EAAE;QAC9BF,GAAG,CAACC,KAAK,CAACE,OAAO,CAAEH,GAA0B,IAAI;UAC/C,IAAI,CAACI,MAAM,CAACC,IAAI,CAACL,GAAG,CAACM,WAAW,CAAC;QACnC,CAAC,CAAC;OACH,MAAK;QACJV,OAAO,CAACC,GAAG,CAACG,GAAG,CAACO,OAAO,CAAC,CAAC,CAAC;;IAE9B,CAAC,CAAC;EAEJ;;EAEA,IAAIrB,KAAK;IACP,OAAO,IAAI,CAACK,UAAU,CAACC,KAAK,CAACN,KAAK;EACpC;EAEA,IAAIE,QAAQ;IACV,OAAO,IAAI,CAACG,UAAU,CAACC,KAAK,CAACJ,QAAQ;EACvC;;SAtCWP,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAA2B;EAAAC;EAAAC;EAAAC;IAAA;MCX5BC,yBAAG;MAAAA,6BAAa;MAAAA,iBAAI","names":["FormControl","FormGroup","Validators","SignupComponent","constructor","_authService","route","toastr","email","required","password","onSubmit","user","signupForm","value","signup","subscribe","res","console","log","success","navigate","err","error","Array","forEach","errors","push","description","message","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\amangaur\\Desktop\\Angular_Learning\\CarRentalApp.UI\\src\\app\\Components\\AnonymousUser\\signup\\signup.component.ts","C:\\Users\\amangaur\\Desktop\\Angular_Learning\\CarRentalApp.UI\\src\\app\\Components\\AnonymousUser\\signup\\signup.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from 'src/app/Services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent {\n  errors:any=[];\n\n  signupForm=new FormGroup({\n    email:new FormControl(\"\",[Validators.required,Validators.email]),\n    password:new FormControl(\"\",Validators.required),\n  });\n  \n  constructor(private _authService:AuthService,private route:Router,private toastr:ToastrService) {}\n\n  onSubmit(){\n    const user={\n      email:this.signupForm.value.email,\n      password:this.signupForm.value.password\n    }\n    //call the service method\n    this._authService.signup(user).subscribe((res:any)=>{\n      console.log(res);\n      this.toastr.success(\"Successfully signup\",\"Car Rental App\");\n      this.route.navigate(['/login']);\n    },(err)=>{\n      if (err.error instanceof Array) {\n        err.error.forEach((err: { description: any; }) => {\n          this.errors.push(err.description);\n        });\n      }else {\n        console.log(err.message); // Display the general error message\n      }\n    })\n\n  }\n\n  get email(){\n    return this.signupForm.value.email;\n  }\n  \n  get password(){\n    return this.signupForm.value.password;\n  }\n  \n}\n","<p>signup works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}