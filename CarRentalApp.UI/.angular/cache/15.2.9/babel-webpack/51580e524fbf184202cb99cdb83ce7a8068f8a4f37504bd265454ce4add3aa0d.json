{"ast":null,"code":"var _class;\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nfunction SignupComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const e_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(e_r4);\n  }\n}\nfunction SignupComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \"Invalid email\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class SignupComponent {\n  constructor(_authService, route, toastr) {\n    this._authService = _authService;\n    this.route = route;\n    this.toastr = toastr;\n    this.errors = [];\n    this.signupForm = new FormGroup({\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      password: new FormControl(\"\", Validators.required)\n    });\n  }\n  onSubmit() {\n    const user = {\n      email: this.signupForm.value.email,\n      password: this.signupForm.value.password\n    };\n    //call the service method\n    this._authService.signup(user).subscribe(res => {\n      console.log(res);\n      this.toastr.success(\"Successfully signup\", \"Car Rental App\");\n      this.route.navigate(['/login']);\n    }, err => {\n      if (err.error instanceof Array) {\n        err.error.forEach(err => {\n          this.errors.push(err.description);\n        });\n      } else {\n        console.log(err); // Display the general error message\n      }\n    });\n  }\n\n  get email() {\n    return this.signupForm.controls.email;\n  }\n  get password() {\n    return this.signupForm.controls.password;\n  }\n}\n_class = SignupComponent;\n_class.ɵfac = function SignupComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.ToastrService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-signup\"]],\n  decls: 20,\n  vars: 8,\n  consts: [[1, \"mt-3\", \"mb-3\"], [1, \"container\"], [1, \"row\"], [1, \"col-6\"], [1, \"border\", \"p-3\", \"mt-5\", \"rounded-5\", 3, \"formGroup\", \"ngSubmit\"], [4, \"ngFor\", \"ngForOf\"], [1, \"form-group\"], [\"for\", \"email\", 1, \"form-label\"], [\"type\", \"email\", \"placeholder\", \"Email Address\", \"formControlName\", \"email\", 1, \"form-control\"], [\"class\", \"form-text text-danger\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"form-label\"], [\"id\", \"password\", \"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"mt-3\", 3, \"disabled\"], [2, \"color\", \"red\"], [1, \"form-text\", \"text-danger\"]],\n  template: function SignupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h3\", 0);\n      i0.ɵɵtext(1, \"Signup\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"div\", 2)(4, \"div\", 3)(5, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function SignupComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtemplate(6, SignupComponent_div_6_Template, 3, 1, \"div\", 5);\n      i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n      i0.ɵɵtext(9, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 8);\n      i0.ɵɵtemplate(11, SignupComponent_div_11_Template, 2, 0, \"div\", 9);\n      i0.ɵɵtemplate(12, SignupComponent_div_12_Template, 2, 0, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"label\", 10);\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 11);\n      i0.ɵɵtemplate(17, SignupComponent_div_17_Template, 2, 0, \"div\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"button\", 12);\n      i0.ɵɵtext(19, \"Submit\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.signupForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.errors);\n      i0.ɵɵadvance(4);\n      i0.ɵɵclassProp(\"is-invalid\", ctx.email.invalid && ctx.email.touched);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.email.errors == null ? null : ctx.email.errors[\"required\"]) && (ctx.email.touched || ctx.email.dirty));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.email.errors == null ? null : ctx.email.errors[\"email\"]) && (ctx.email.touched || ctx.email.dirty));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", (ctx.password.errors == null ? null : ctx.password.errors[\"required\"]) && (ctx.password.touched || ctx.password.dirty));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ctx.signupForm.invalid);\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.FormGroupDirective, i5.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;;;ICKnDC,2BAA8B;IACHA,YAAK;IAAAA,iBAAI;;;;IAATA,eAAK;IAALA,0BAAK;;;;;IAO5BA,+BAAwG;IAAAA,iCAAiB;IAAAA,iBAAM;;;;;IAC/HA,+BAAqG;IAAAA,6BAAa;IAAAA,iBAAM;;;;;IASxHA,+BAAiH;IAAAA,oCAAoB;IAAAA,iBAAM;;;ADb/J,OAAM,MAAOC,eAAe;EAQ1BC,YAAoBC,YAAwB,EAASC,KAAY,EAASC,MAAoB;IAA1E,iBAAY,GAAZF,YAAY;IAAqB,UAAK,GAALC,KAAK;IAAgB,WAAM,GAANC,MAAM;IAPhF,WAAM,GAAK,EAAE;IAEb,eAAU,GAAC,IAAIP,SAAS,CAAC;MACvBQ,KAAK,EAAC,IAAIT,WAAW,CAAC,EAAE,EAAC,CAACE,UAAU,CAACQ,QAAQ,EAACR,UAAU,CAACO,KAAK,CAAC,CAAC;MAChEE,QAAQ,EAAC,IAAIX,WAAW,CAAC,EAAE,EAACE,UAAU,CAACQ,QAAQ;KAChD,CAAC;EAE+F;EAEjGE,QAAQ;IACN,MAAMC,IAAI,GAAC;MACTJ,KAAK,EAAC,IAAI,CAACK,UAAU,CAACC,KAAK,CAACN,KAAK;MACjCE,QAAQ,EAAC,IAAI,CAACG,UAAU,CAACC,KAAK,CAACJ;KAChC;IACD;IACA,IAAI,CAACL,YAAY,CAACU,MAAM,CAACH,IAAI,CAAC,CAACI,SAAS,CAAEC,GAAO,IAAG;MAClDC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,IAAI,CAACV,MAAM,CAACa,OAAO,CAAC,qBAAqB,EAAC,gBAAgB,CAAC;MAC3D,IAAI,CAACd,KAAK,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC,EAAEC,GAAG,IAAG;MACP,IAAIA,GAAG,CAACC,KAAK,YAAYC,KAAK,EAAE;QAC9BF,GAAG,CAACC,KAAK,CAACE,OAAO,CAAEH,GAA0B,IAAI;UAC/C,IAAI,CAACI,MAAM,CAACC,IAAI,CAACL,GAAG,CAACM,WAAW,CAAC;QACnC,CAAC,CAAC;OACH,MAAK;QACJV,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC,CAAC,CAAC;;IAEtB,CAAC,CAAC;EAEJ;;EAEA,IAAId,KAAK;IACP,OAAO,IAAI,CAACK,UAAU,CAACgB,QAAQ,CAACrB,KAAK;EACvC;EAEA,IAAIE,QAAQ;IACV,OAAO,IAAI,CAACG,UAAU,CAACgB,QAAQ,CAACnB,QAAQ;EAC1C;;SAtCWP,eAAe;;mBAAfA,MAAe;AAAA;;QAAfA,MAAe;EAAA2B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX5BhC,6BAAuB;MAAAA,sBAAM;MAAAA,iBAAK;MAClCA,8BAAuB;MAGoBA;QAAA,OAAYiC,cAAU;MAAA,EAAC;MAElDjC,gEAEM;MAGNA,8BAAwB;MACkBA,qBAAK;MAAAA,iBAAQ;MACnDA,4BAAkJ;MAClJA,kEAA+H;MAC/HA,kEAAwH;MAC5HA,iBAAM;MAKNA,+BAAwB;MACqBA,yBAAQ;MAAAA,iBAAQ;MACzDA,6BAA4G;MAC5GA,kEAA2I;MAC/IA,iBAAM;MAKNA,mCAAmF;MAAAA,uBAAM;MAAAA,iBAAS;;;MA1BhGA,eAAwB;MAAxBA,0CAAwB;MAEPA,eAAS;MAATA,oCAAS;MAOqEA,eAAmD;MAAnDA,oEAAmD;MAC5GA,eAAkE;MAAlEA,iIAAkE;MAClEA,eAA+D;MAA/DA,8HAA+D;MAS/DA,eAA2E;MAA3EA,6IAA2E;MAM7FA,eAA+B;MAA/BA,iDAA+B","names":["FormControl","FormGroup","Validators","i0","SignupComponent","constructor","_authService","route","toastr","email","required","password","onSubmit","user","signupForm","value","signup","subscribe","res","console","log","success","navigate","err","error","Array","forEach","errors","push","description","controls","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\amangaur\\Desktop\\Angular_Learning\\CarRentalApp.UI\\src\\app\\Components\\AnonymousUser\\signup\\signup.component.ts","C:\\Users\\amangaur\\Desktop\\Angular_Learning\\CarRentalApp.UI\\src\\app\\Components\\AnonymousUser\\signup\\signup.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AuthService } from 'src/app/Services/auth.service';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent {\n  errors:any=[];\n\n  signupForm=new FormGroup({\n    email:new FormControl(\"\",[Validators.required,Validators.email]),\n    password:new FormControl(\"\",Validators.required),\n  });\n  \n  constructor(private _authService:AuthService,private route:Router,private toastr:ToastrService) {}\n\n  onSubmit(){\n    const user={\n      email:this.signupForm.value.email,\n      password:this.signupForm.value.password\n    }\n    //call the service method\n    this._authService.signup(user).subscribe((res:any)=>{\n      console.log(res);\n      this.toastr.success(\"Successfully signup\",\"Car Rental App\");\n      this.route.navigate(['/login']);\n    },(err)=>{\n      if (err.error instanceof Array) {\n        err.error.forEach((err: { description: any; }) => {\n          this.errors.push(err.description);\n        });\n      }else {\n        console.log(err); // Display the general error message\n      }\n    })\n\n  }\n\n  get email(){\n    return this.signupForm.controls.email;\n  }\n  \n  get password(){\n    return this.signupForm.controls.password;\n  }\n  \n}\n","<h3 class=\" mt-3 mb-3\">Signup</h3>\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-6\">\n            <form [formGroup]=\"signupForm\" (ngSubmit)=\"onSubmit()\" class=\"border p-3 mt-5 rounded-5\">\n        \n                <div *ngFor=\"let e of errors\">\n                    <p style=\"color: red;\">{{e}}</p>\n                </div>\n         \n                \n                <div class=\"form-group\">\n                    <label for=\"email\" class=\"form-label\">Email</label>\n                    <input type=\"email\" class=\"form-control\" placeholder=\"Email Address\" formControlName=\"email\" [class.is-invalid]=\"email.invalid && email.touched\" >\n                    <div class=\"form-text text-danger\" *ngIf=\"email.errors?.['required'] && (email.touched || email.dirty)\">Email is required</div>\n                    <div class=\"form-text text-danger\" *ngIf=\"email.errors?.['email'] && (email.touched || email.dirty)\">Invalid email</div>\n                </div>\n                \n        \n                \n                \n                <div class=\"form-group\">\n                    <label for=\"password\" class=\"form-label\">Password</label>\n                    <input id=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Password\" formControlName=\"password\">\n                    <div class=\"form-text text-danger\" *ngIf=\"password.errors?.['required'] && (password.touched || password.dirty)\">Password is required</div>\n                </div>\n                \n                \n                \n                \n                <button type=\"submit\" [disabled]=\"signupForm.invalid\" class=\"btn btn-primary mt-3\">Submit</button>\n                        \n               \n        \n            </form>\n            \n\n        </div>\n    </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}